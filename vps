#!/usr/bin/env bash

# The playbook can also be ran directly when knowing the code:
# Example:
# ansible-playbook -K main.yml --skip-tags="common,dns,wireguard,searxng"

set -e

# if [ -z ${VIRTUAL_ENV+x} ]
# then
#   ACTIVATE_SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.env/bin/activate"
#   if [ -f "$ACTIVATE_SCRIPT" ]
#   then
#     # shellcheck source=/dev/null
#     source "$ACTIVATE_SCRIPT"
#   else
#     echo "$ACTIVATE_SCRIPT not found.  Did you follow documentation to install dependencies?"
#     exit 1
#   fi
# fi

_provision(){
  ansible-playbook -e "ansible_ssh_user=root" provision.yml;
}

_main(){
  ansible-playbook -K main.yml;
}

_all(){
  _provision;
  _main;
}

_wireguard_rotate(){
  ansible-playbook -K wireguard_rotate.yml
}

_wireguard_update_users(){
  ansible-playbook -K main.yml --tags="wireguard";
}

_searxng_update(){
  ansible-playbook -K main.yml --tags="searxng";
}


# p) PLAYBOOK=provision.yml; ARGS=( "${@:2}"  -t update-users ) ;;
# *) PLAYBOOK=main.yml; ARGS=( "${@}" ) ;;
# ansible-playbook -K main.yml --skip-tags="common,dns,wireguard,searxng"
action=$1
shift
case "$action" in
  1) _all ;;
  2) _main ;;
  3) _provision ;;
  10) _wireguard_update_users ;;
  11) _wireguard_rotate ;;
  20) _searxng_update ;;
  *) echo -e "Unknown subcommand. " && exit 1 ;;
esac

# ansible-playbook ${PLAYBOOK} "${ARGS[@]}"
