#!/usr/bin/env bash

set -e

# try sourcing python virtualenv
if [ -z ${VIRTUAL_ENV+x} ]
then
  ACTIVATE_SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.env/bin/activate"
  if [ -f "$ACTIVATE_SCRIPT" ]
  then
    # shellcheck source=/dev/null
    source "$ACTIVATE_SCRIPT"
  else
# No virtualenv, fallback to systemwide ansible installtion
    [[ -z "$(command -v ansible)" ]] && echo "Ansible not found. Please use script install_requirements" && exit 1
  fi
fi

_ensure_requirements(){
  ansible-playbook -e "ansible_ssh_user=root" provision.yml --tags=ensure_requirements;
}

# harden ssh, create ssh user
_provision(){
  ansible-playbook -e "ansible_ssh_user=root" provision.yml;
}

# install and configure software
_main(){
  ansible-playbook -K main.yml;
}

# new server, run all
_all(){
  _provision;
  _main;
}

# reuse certificates when disposing a server
_backup_certificates(){
  ansible-playbook -K -e "standalone_role=caddy standalone_from=standalone/backup_certificates.yml" standalone.yml
}

# Start generating new wireguard configs
# All wireguard clients will have to import a new config...
_wireguard_rotate(){
  ansible-playbook -K -e "standalone_role=wireguard standalone_from=standalone/rotate.yml" standalone.yml
}

# Add and delete users given an existing wireguard config 
_wireguard_users_add_and_delete(){
  ansible-playbook -K -e "standalone_role=wireguard standalone_from=standalone/add_and_delete.yml" standalone.yml
}

_searxng_update(){
  ansible-playbook -K main.yml --tags="searxng";
}

# run playbook limited to a tag
_with_tags(){
  if [[ (-z "$1") ]]; then
		echo "Usage: <tags>"
		exit 1
	fi
  local tags="$1"
  ansible-playbook -K main.yml --tags="$tags";
}

action=$1
shift
case "$action" in
  "all") _all ;;
  "main") _main ;;
  "provision") _provision ;;
  "ensure_requirements") _ensure_requirements ;;
  "backup_certificates") _backup_certificates ;;
  "wireguard_users_add_and_delete") _wireguard_users_add_and_delete ;;
  "wireguard_rotate") _wireguard_rotate ;;
  "searxng_update") _searxng_update ;;
  "with_tags") _with_tags "$1" ;;
  "help") tail -n 15 "$0" ;;
  *) echo -e "Unknown subcommand. " && exit 1 ;;
esac
