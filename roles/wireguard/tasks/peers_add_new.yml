---

- name: Retrieve generated keys
  ansible.builtin.command: vps_wg_peer_keys
  register: peer_keys_result
  changed_when: false
  loop: "{{ wg_peernames_to_add }}"

# - name: Debug retrieval results
#   ansible.builtin.debug:
#     msg: |
#       peer_keys_result: {{ item.item }}
#       ... other data ...
#       pubkey: "{{ item.stdout_lines[2] }}"
#   loop: "{{ peer_keys_result['results'] }}"

- name: Build internal dictionary containing new peers information
  ansible.builtin.set_fact:
    wg_peers: "{{ wg_peers | default([]) | union([{'name': name, 'ip': ip, 'ipv6': ipv6, \
                 'key': key, 'pskkey': pskkey, 'pubkey': pubkey}]) }}"
  loop: "{{ peer_keys_result['results'] }}"
  loop_control:
    index_var: peer_incr
  vars:
    name: "{{ item.item }}"
    ip: "{{ wireguard_network_ipv4 \
         | ansible.utils.ipmath(peer_incr | int + wg_host_peers_ip_index_start | int) }}"
    ipv6: "{{ wireguard_network_ipv6 \
           | ansible.utils.ipmath(peer_incr | int + wg_host_peers_ip_index_start | int) if vps_ipv6_support else '' }}"
    key: "{{ item.stdout_lines[0] }}"
    pskkey: "{{ item.stdout_lines[1] }}"
    pubkey: "{{ item.stdout_lines[2] }}"
  no_log: "{{ wireguard_no_log }}"

# uses wg_peers in loop in template
- name: Process, create file wg_part_new_peers on the host
  ansible.builtin.template:
    src: host_peers.yml.j2
    dest: "{{ wg_part_new_peers }}"
    mode: "0600"

# uses wg_peers and wg_host
- name: Process, for each peer create a client interface on the ansible controller
  ansible.builtin.include_tasks: generate_clients.yml
  loop: "{{ wg_peers }}"
  loop_control:
    loop_var: wg_client
  no_log: "{{ wireguard_no_log }}"
