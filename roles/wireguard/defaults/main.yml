---
###############################################################################
# Deploy WireGuard. WireGuard will listen on 51820/UDP.
# You might need to change to another port if your network blocks this one.
# Be aware that 53/UDP (DNS) is blocked on some mobile data networks.

###############################################################################
# Modifiable:
wireguard_enabled: true
#
# Every device must have a unique user. There are 65,534 slots.
# Requirements: Escape leading 0's or only numbers in double quotes("000dan" or "123").
# Email addresses are not allowed
# The list defaults to one client named vpnuser
wireguard_users:
  - vpnuser
#
# If you're behind NAT or a firewall and you want to receive incoming connections long after network traffic has gone silent.
# This option will keep the "connection" open in the eyes of NAT.
# See: https://www.wireguard.com/quickstart/#nat-and-firewall-traversal-persistence
wireguard_persistentkeepalive: 0
#
# Reduce the MTU of the VPN tunnel
# Some cloud and internet providers use a smaller MTU (Maximum Transmission
# Unit) than the normal value of 1500 and if you don't reduce the MTU of your
# VPN tunnel some network connections will hang.
# The playbook will attempt to set this automatically based on your server,
# but if connections hang you might need to adjust this yourself.
# See: https://github.com/trailofbits/algo/blob/master/docs/troubleshooting.md#various-websites-appear-to-be-offline-through-the-vpn
wireguard_reduce_mtu: 0
#
# Disable logging when generating keys:
wireguard_no_log: true

###############################################################################
# Network configuration, modify with care, should not be needed
wireguard_interface: wg0
wireguard_service_name: "wg-quick@{{ wireguard_interface }}"
wireguard_port: 51820
wireguard_port_avoid: 53
wireguard_port_actual: 51820
wireguard_network_ipv4: 10.49.0.0/16
wireguard_network_ipv6: 2001:db8:a160::/48
#
# Previously ip_subject_alt_name: '', set in tasks
wireguard_host_ip: "{{ ansible_default_ipv4.address }}"
wireguard_client_ip: >-
  {{ wireguard_network_ipv4 | ansible.utils.ipmath(index|int+2) }}
  {{ ',' + wireguard_network_ipv6 | ansible.utils.ipmath(index|int+2) if ipv6_support else '' }}
wireguard_server_ip: >-
  {{ wireguard_network_ipv4 | ansible.utils.ipaddr('1') }}
  {{ ',' + wireguard_network_ipv6 | ansible.utils.ipaddr('1') if ipv6_support else '' }}

###############################################################################
# Local storage, modify with care, should not be needed
#
wireguard_config_path: "configs/{{ wireguard_host_ip }}/wireguard/"
wireguard_pki_path: "{{ wireguard_config_path }}/.pki/"

###############################################################################
# Not modifiable:
#
# Overridden in group_vars:
wireguard_dns_servers:
#
# TODO: Not implemented: Glue variables for the firewall:
#
# Block traffic between connected clients. Change this to false to enable
# connected clients to reach each other, as well as other computers on the
# same LAN as the server(i.e. the "road warrior" setup). In this
# case, you may also want to enable SMB/CIFS and NETBIOS traffic below.
wg_between_clients_drop:
# Block SMB/CIFS traffic
wg_block_smb:
# Block NETBIOS traffic
wg_block_netbios:
