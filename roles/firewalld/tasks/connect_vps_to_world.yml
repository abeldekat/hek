---

# no zone drifting:
# https://firewalld.org/2020/01/allowzonedrifting
#
# policy for masquerading: Conditionally accept forward and masquerade
# --> when the masquerade flag is set directly on zone public the following changes occur in nft firewalld table:
# chain nat_POST_public_allow {
#         oifname != "lo" masquerade
# }
# chain filter_FWDO_public_allow {
# ct state { new, untracked } accept
# }
#
# Firewalld will eventually support masquerading by policy on ingress zone with interface:
# https://github.com/firewalld/firewalld/issues/939
# https://firewalld.org/2020/09/policy-objects-filtering-container-and-vm-traffic
# if one wants to have the masquerade on policy, vps zone cannot be assigned to interface.
# chain nat_POST_policy_vpsToWorld_allow {
# chain filter_FORWARD_POLICIES_pre {
#         ip6 saddr 2001:db8:a160::/48 jump filter_FWD_policy_vpsToWorld
#         ip saddr 10.49.0.0/16 jump filter_FWD_policy_vpsToWorld
# }

- name: Capture vpsToWorld policy is present
  ansible.builtin.shell: |
    set -o pipefail && \
    firewall-cmd --get-policies | grep -c vpsToWorld || true
  args:
    executable: /bin/bash
  register: vpstoworld_result
  changed_when: false

- name: Ensure vpsToWorld policy is present and configured
  ansible.builtin.shell: |
    firewall-cmd --permanent --new-policy=vpsToWorld && \
    firewall-cmd --permanent --policy=vpsToWorld --add-ingress-zone="{{ firewalld_custom_vps_zone }}" && \
    firewall-cmd --permanent --policy=vpsToWorld --add-egress-zone=ANY && \
    firewall-cmd --permanent --policy=vpsToWorld --add-masquerade
  args:
    executable: /bin/bash
  when: vpstoworld_result.stdout == '0'
  notify: reload firewalld

- name: Ensure vpsToWorld policy allows ipv6 masquerading
  ansible.builtin.shell: |
    firewall-cmd --permanent --policy=vpsToWorld --add-rich-rule='rule family="ipv6" masquerade'
  args:
    executable: /bin/bash
  when:
    - vps_ipv6_support
    - vpstoworld_result.stdout == '0'
  notify: reload firewalld
