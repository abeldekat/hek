---
# - name: Gather facts
#   setup:

- name: Install software updates
  ansible.builtin.apt:
    update_cache: true
    install_recommends: true
    upgrade: dist
  register: result
  until: result is succeeded
  retries: 5
  delay: 10

- name: Check if reboot is required
  ansible.builtin.shell: >
    if [[ -e /var/run/reboot-required ]]; then echo "required"; else echo "no"; fi
  args:
    executable: /bin/bash
  register: reboot_required
  changed_when: false

- name: Ensure reboot if required. Using defaults
  ansible.builtin.reboot:
  when: reboot_required is defined and reboot_required.stdout == 'required'

- name: Wait until the server becomes ready...
  ansible.builtin.wait_for_connection:
    delay: 20
    timeout: 320
  when: reboot_required is defined and reboot_required.stdout == 'required'

# - name: Include unattended upgrades configuration
#   import_tasks: unattended-upgrades.yml

# - name: Disable MOTD on login and SSHD
#   replace: dest="{{ item.file }}" regexp="{{ item.regexp }}" replace="{{ item.line }}"
#   with_items:
#     - { regexp: '^session.*optional.*pam_motd.so.*', line: '# MOTD DISABLED', file: '/etc/pam.d/login' }
#     - { regexp: '^session.*optional.*pam_motd.so.*', line: '# MOTD DISABLED', file: '/etc/pam.d/sshd' }

# - name: Ensure fallback resolvers are set
#   ini_file:
#     path: /etc/systemd/resolved.conf
#     section: Resolve
#     option: FallbackDNS
#     value: "{{ dns_servers.ipv4 | join(' ') }}"
#   notify:
#     - restart systemd-resolved

# - name: Loopback for services configured
#   template:
#     src: 10-algo-lo100.network.j2
#     dest: /etc/systemd/network/10-algo-lo100.network
#   notify:
#     - restart systemd-networkd

- name: Ensure systemd services enabled and started
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  with_items:
    - systemd-networkd
    - systemd-resolved

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  ansible.builtin.meta: flush_handlers

# - name: Check apparmor support
#   command: apparmor_status
#   ignore_errors: yes
#   changed_when: false
#   register: apparmor_status

# - name: Set fact if apparmor enabled
#   set_fact:
#     apparmor_enabled: true
#   when: '"profiles are in enforce mode" in apparmor_status.stdout'

# - name: Gather additional facts
#   import_tasks: facts.yml

- name: Set OS specific facts
  ansible.builtin.set_fact:
    tools:
      - git
      - nftables
      # - screen
      # - apparmor-utils
      # - uuid-runtime
      # - coreutils
      # - iptables-persistent
      # - cgroup-tools
      # - openssl
      # - gnupg2
      - tmux
      - htop
    sysctl:
      - item: net.ipv4.ip_forward
        value: 1
      - item: net.ipv4.conf.all.forwarding
        value: 1
      - item: net.ipv6.conf.all.forwarding
        value: 0

- name: Ensure tools are installed
  ansible.builtin.apt:
    name: "{{ tools|default([]) }}"
    state: present
    update_cache: true

# - name: Install headers
#   apt:
#     name:
#       - linux-headers-generic
#       - "linux-headers-{{ ansible_kernel }}"
#     state: present
#   when: install_headers | bool


- include_tasks: nftables.yml
  tags: nftables
