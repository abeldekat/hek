#!/usr/sbin/nft -f

# --> Not in use. 
# https://www.vultr.com/docs/how-to-configure-a-debian-11-bullseye-server-with-ansible/
# https://unix.stackexchange.com/questions/657545/nftables-whitelisting-docker
# https://unix.stackexchange.com/questions/607358/packet-processing-order-in-nftables

# https://pablotron.org/articles/nftables-examples/#server-firewall
# Commands
# --------
# * `nft list counters`: to show counter values
# * `nft list ruleset`: list rules
# * `nft monitor`: monitor traces
# * `nft monitor trace | grep 'output packet'`: monitor out traffic
# * `nft -f /etc/nftables-reset.conf`: disable filters

flush ruleset

define pub_iface = {{ ansible_default_ipv4.alias }}
define wg_iface = {{ wireguard_interface }}
define wg_port = {{ wireguard_port }}

define dns_ipv4 = {{ local_service_ip }}
define dns_ipv6 = {{ local_service_ipv6 }}
define wg_net_ipv4 = {{ wireguard_network_ipv4 }}
define wg_net_ipv6 = {{ wireguard_network_ipv6 }}

# table netdev drop-bad-packets {
#     chain ingress {
#         # drop tcp "xmas" packets (bad flag combo)
#         tcp flags & (fin | psh | urg) == fin | psh | urg drop
#         # drop tcp packets with no flags
#         tcp flags & (fin | syn | rst | psh | ack | urg) == 0x0 drop
#         # drop tcp packets with mss below minimum
#         tcp flags syn tcp option maxseg size 1-535 drop
#     }

#     chain ingress-eth0 {
#         type filter hook ingress device "eth0" priority -450; policy accept;
#         goto ingress
#     }
# }

# table inet drop-bad-ct-states {
#     chain prerouting {
#         type filter hook prerouting priority -150; policy accept;

#         # drop packets in "invalid" connection-tracking state
#         ct state invalid drop
#         # drop tcp packets for new connections that aren't syn packets
#         ct state new tcp flags & (fin | syn | rst | ack) != syn drop
#         # drop new connections over rate limit
#         ct state new limit rate over 1/second burst 10 packets drop
#     }
# }

table inet fw {
    counter drop_ct_invalid {}
    counter accept_ct_rel {}
    counter drop_loop_v4 {}
    counter drop_loop_v6 {}
    counter accept_icmp_v4 {}
    counter accept_icmp_v6 {}
    counter accept_ssh {}
    counter accept_http {}
    counter accept_https {}
    counter drop_input {}
    counter drop_forward {}
    counter accept_docker_forward {}
    counter accept_output {}

    # -A INPUT -p icmp --icmp-type echo-request -m hashlimit --hashlimit-upto 5/s --hashlimit-mode srcip --hashlimit-srcmask 32 --hashlimit-name icmp-echo-drop -j ACCEPT
    chain input {
        type filter hook input priority 0; policy drop;

        # connection tracker
        ct state invalid counter name drop_ct_invalid drop comment "early drop of invalid packets"
        ct state {established,related} counter name accept_ct_rel accept comment "accept all connections related to connections made by us"

        # accept all loopback traffic
        iif lo accept comment "accept loopback"

        # drop loopback traffic on non-loopback interfaces
        iif != lo ip daddr 127.0.0.1/8 counter name drop_loop_v4 drop comment "drop connections to loopback not coming from loopback"
        iif != lo ip6 daddr ::1/128 counter name drop_loop_v6 drop comment "drop connections to loopback not coming from loopback"

        # accept icmp
        ip protocol icmp counter name accept_icmp_v4 accept comment "accept all ICMP types"
        # accept neighbour discovery otherwise connectivity breaks
        #
        # icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept
        ip6 nexthdr icmpv6 counter name accept_icmp_v6 accept comment "accept all ICMP types"

        # accept ssh( todo maybe wireguard just for ssh? Fail2ban!) 
        tcp dport 22 counter name accept_ssh accept comment "accept SSH"

        ### public wireguard ###
        #-A INPUT -p udp -m multiport --dports 51820 -j ACCEPT
        # udp dport $wg_port ct state { new, untracked } accept
        udp dport $wg_port accept comment "accept wireguard"

        # Accept DNS traffic to the local DNS resolver
        # -A INPUT -d 172.24.117.23 -p udp --dport 53 -j ACCEPT
        iifname $wg_iface ip daddr $dns_ipv4 udp dport 53 accept comment "accept dns traffic to local dns resolver from wireguard"
        iifname $wg_iface ip6 daddr $dns_ipv6 udp dport 53 accept comment "accept dns traffic to local dns resolver from wireguard"

        # http https ###
        tcp dport 80 counter name accept_http accept
        tcp dport 443 counter name accept_https accept

        # count/log remaining (disabled because of log spam)
        # counter name drop_input log prefix "DROP " comment "drop input"
        counter name drop_input comment "count dropped packets"
    }

    chain dockercase {
        # additional rules here:

        # accept by default
        accept;
    }

    # Priority must be higher than chain ip filter FILTER
    chain forward {
        type filter hook forward priority 10; policy drop;

        # Accept packages accepted by docker in chain ip filter FILTER
        meta mark 0xd0cca5e counter name accept_docker_forward jump dockercase

        ct state { established, related } accept
        iif "lo" accept

        # Forward any traffic from the WireGuard VPN network
        # -A FORWARD -m conntrack --ctstate NEW -s 10.49.0.0/16 -m policy --pol none --dir in -j ACCEPT
        iifname $wg_iface oifname $pub_iface ct state new accept comment "forward wireguard traffic"

        counter name drop_forward comment "count dropped packets"
    }


    # If you're not counting packets, this chain can be omitted.
    chain output {
        type filter hook output priority 0; policy accept;
        counter name accept_output comment "count accepted packets"
    }

    # -A POSTROUTING -s 10.49.0.0/16 -m policy --pol none --dir out -j MASQUERADE
    chain postrouting {
        type nat hook postrouting priority srcnat;
        ip saddr $wg_net_ipv4 oifname $pub_iface masquerade;
        ip6 saddr $wg_net_ipv6 oifname $pub_iface masquerade;
    }
}

# Adapter table for docker iptables. Will be modified by docker
table ip filter {
    counter mark_docker_reset {}

    # Do not use a named counter inside this chain!
    chain DOCKER-USER {
        # iptables -I DOCKER-USER 1 -j MARK --set-mark 0xd0cca5e
        # counter packets 16 bytes 982 meta mark set 0xd0cca5e
        meta mark set 0xd0cca5e
    }

    chain FORWARD {
        # docker uses drop policy
        type filter hook forward priority 0; policy drop;
        # docker generated code follows:

        # Code only reached when docker does no accepts: reset the mark: 
        # iptables -A FORWARD -m mark --mark 0xd0cca5e -j MARK --set-mark 0
        # mark 0xd0cca5e counter packets 0 bytes 0 meta mark set 0x0
        mark 0xd0cca5e counter name mark_docker_reset meta mark set 0x0
        # accept all for processing in chain inet fw foward
        accept;
    }
}
