---

# https://docs.docker.com/engine/security/rootless/
# Current linux kernel: 5.10.0-14-amd64
# --> overlay2 only runs on kernel 5.11 or later, user fuse-overlay

# /etc/subuid and /etc/subgid should contain at least 65,536 subordinate UIDs/GIDs for the user.
# grep ^$(whoami): /etc/subuid
# grep ^$(whoami): /etc/subgid
#
# slirp4netns --version: 1.0.1
#
# cat /proc/sys/user/max_user_namespaces
# --> 3775, might be too small
# To fix this issue, add user.max_user_namespaces=28633 to /etc/sysctl.conf (or /etc/sysctl.d) and run sudo sysctl --system.

- name: Ensure system-wide docker is disabled and masked
  ansible.builtin.systemd:
    service: "{{ item }}"
    state: stopped
    enabled: false
    masked: true
  with_items:
    - "docker.service"
    - "docker.socket"

# systemctl --user is-active dbus
# systemctl --user enable --now dbus
- name: Ensure systemctl --user is-active dbus
  ansible.builtin.systemd:
    service: dbus
    scope: user
    state: started
    enabled: true
  become: false

# ls /var/lib/systemd/linger
- name: Capture if user is lingering
  ansible.builtin.stat:
    path: "/var/lib/systemd/linger/{{ vps_user }}"
  register: user_lingering

- name: Ensure lingering is enabled
  ansible.builtin.command: "loginctl enable-linger {{ vps_user }}"
  when:
    - not user_lingering.stat.exists

- name: Capture rootlesskit binary path
  ansible.builtin.command: "which rootlesskit"
  changed_when: false
  register: rootlesskit_bin

- name: Capture rootlesskit current cap
  ansible.builtin.command: "getcap {{ rootlesskit_bin.stdout }}"
  changed_when: false
  register: rootlesskit_cap

# sudo setcap cap_net_bind_service=ep $(which rootlesskit)
- name: Ensure privileged ports are available in rootless mode, setcap
  ansible.builtin.command: "setcap cap_net_bind_service=ep {{ rootlesskit_bin.stdout }}"
  when: rootlesskit_cap.stdout == ''

# https://www.debian.org/releases/stable/amd64/release-notes/ch-information.html
# 5.1.14. Linux enables user namespaces by default
# values are set to 3775
- name: Ensure user.max_user_namespaces is 28633
  ansible.posix.sysctl:
    name: user.max_user_namespaces
    value: 28633

- name: Capture if dockerd-rootless-setuptool needs running
  ansible.builtin.stat:
    path: ~/.config/systemd/user/docker.service
  register: run_dockerd_rootless_setuptool_required
  become: false

- name: Set fact dockerd-rootless-setuptool needs running
  ansible.builtin.set_fact:
    run_setuptool: "{{ not run_dockerd_rootless_setuptool_required.stat.exists }}"
  become: false

- name: Ensure reboot before rootless setup script runs
  ansible.builtin.reboot:
  when: run_setuptool

- name: Wait until the server becomes ready...
  ansible.builtin.wait_for_connection:
    delay: 20
    timeout: 320
  when: run_setuptool

- name: Ensure script dockerd-rootless-setuptool runs
  ansible.builtin.command: dockerd-rootless-setuptool.sh install --force
  become: false
  when: run_setuptool

- name: Ensure bashrc contains DOCKER_HOST export
  ansible.builtin.lineinfile:
    dest: "~/.bashrc"
    line: "export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock"
    state: present
    backup: true
  become: false

- name: Ensure zshrc contains DOCKER_HOST export
  ansible.builtin.lineinfile:
    dest: "~/.config/zsh/.zshrc"
    line: "export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock"
    state: present
    backup: true
  when: docker_rootless_and_terminal_enabled
  become: false

- name: Ensure reboot after rootless setup script has ran.
  ansible.builtin.reboot:
  when: run_setuptool

- name: Wait until the server becomes ready...
  ansible.builtin.wait_for_connection:
    delay: 20
    timeout: 320
  when: run_setuptool

# The socket path is set to $XDG_RUNTIME_DIR/docker.sock by default. $XDG_RUNTIME_DIR is typically set to /run/user/$UID.
# The data dir is set to ~/.local/share/docker by default. The data dir should not be on NFS.
# The daemon config dir is set to ~/.config/docker by default. This directory is different from ~/.docker that is used by the client.
- name: Ensure rootless docker is enabled and started
  ansible.builtin.systemd:
    service: docker
    scope: user
    state: started
    enabled: true
  become: false
